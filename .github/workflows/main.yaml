name: Deploy Three-Tier App to Azure VM

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # ✅ Ensure SSH Key is Available
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          chmod 600 ~/.ssh/id_rsa

      - name: Upload SSH Key as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh/id_rsa

      # ✅ Login to Azure
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: >
            {
              "clientId":"${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}",
              "tenantId":"${{ secrets.AZURE_TENANT_ID }}",
              "subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}"
            }

      # ✅ Get Public IP of VM
      - name: Get VM Public IP
        run: |
          ip=$(az vm list-ip-addresses \
            --resource-group test-rg \
            --name test-vm \
            --query "[].virtualMachine.network.publicIpAddresses[0].ipAddress" \
            --output tsv)
          echo "ip=$ip" >> $GITHUB_ENV

      # ✅ Download SSH Key
      - name: Download SSH Key
        uses: actions/download-artifact@v4
        with:
          name: ssh-key
          path: ~/.ssh

      - name: Set Correct SSH Key Permissions
        run: chmod 600 ~/.ssh/id_rsa

      # ✅ Add SSH Key to VM
      - name: Add SSH Key to VM
        run: |
          PUBLIC_KEY=$(cat ~/.ssh/id_rsa.pub)
          az vm run-command invoke \
            --resource-group test-rg \
            --name test-vm \
            --command-id RunShellScript \
            --scripts "mkdir -p /home/azureuser/.ssh && echo \"$PUBLIC_KEY\" >> /home/azureuser/.ssh/authorized_keys && chmod 600 /home/azureuser/.ssh/authorized_keys && chown azureuser:azureuser /home/azureuser/.ssh/authorized_keys"

      # ✅ Verify SSH Connection
      - name: Verify SSH Connection
        run: ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} "echo SSH Connection Successful"

      # ✅ Deploy Dockerized App to Azure VM
      - name: Deploy Three-Tier App
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} << 'EOF'
            set -e

            # ✅ Update System & Install Dependencies
            sudo apt update && sudo apt install -y docker.io docker-compose git ufw

            # ✅ Ensure User is in Docker Group
            sudo usermod -aG docker azureuser
            newgrp docker

            # ✅ Clone or Update the Repository
            mkdir -p ~/app
            cd ~/app

            if [ ! -d .git ]; then
              echo "Cloning repository..."
              git clone https://${{ secrets.TOKEN_GITHUB }}@github.com/Ayeesha208/three-tier-architecture-demo.git .
            else
              echo "Updating repository..."
              git reset --hard  # Avoid conflicts
              git pull origin master
            fi

            # ✅ Create systemd Service for Docker Compose
            sudo bash -c 'cat > /etc/systemd/system/myapp.service <<EOF2
            [Unit]
            Description=Three-Tier App using Docker Compose
            After=network.target

            [Service]
            User=azureuser
            WorkingDirectory=/home/azureuser/app
            ExecStart=/usr/bin/docker compose up -d
            ExecStop=/usr/bin/docker compose down
            Restart=always

            [Install]
            WantedBy=multi-user.target
            EOF2'

            # ✅ Reload & Start the Service
            sudo systemctl daemon-reload
            sudo systemctl enable myapp.service
            sudo systemctl restart myapp.service

            # ✅ Open Required Ports
            sudo ufw allow 8080  # Web App
            sudo ufw allow 5000  # Backend (if needed)
            sudo ufw reload

            # ✅ Check Running Containers
            docker compose ps
          EOF

      # ✅ Verify Deployment
      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa azureuser@${{ env.ip }} << 'EOF'
            sleep 5  # Wait for the app to start
            curl -I http://localhost:8080 || echo "Web App is not responding"
            sudo systemctl status myapp.service || echo "myapp.service failed to start"
          EOF
